[{"/Users/markeltskhadadze/Desktop/React-Todo/todo/src/index.js":"1","/Users/markeltskhadadze/Desktop/React-Todo/todo/src/App.js":"2","/Users/markeltskhadadze/Desktop/React-Todo/todo/src/reportWebVitals.js":"3","/Users/markeltskhadadze/Desktop/React-Todo/todo/src/List.js":"4"},{"size":500,"mtime":1609324687453,"results":"5","hashOfConfig":"6"},{"size":3334,"mtime":1610311918869,"results":"7","hashOfConfig":"6"},{"size":362,"mtime":1609324687454,"results":"8","hashOfConfig":"6"},{"size":642,"mtime":1610290601160,"results":"9","hashOfConfig":"6"},{"filePath":"10","messages":"11","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"12"},"1f7c2a2",{"filePath":"13","messages":"14","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"15","usedDeprecatedRules":"12"},{"filePath":"16","messages":"17","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"12"},{"filePath":"18","messages":"19","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"20"},"/Users/markeltskhadadze/Desktop/React-Todo/todo/src/index.js",[],["21","22"],"/Users/markeltskhadadze/Desktop/React-Todo/todo/src/App.js",["23"],"import \"./App.css\";\nimport React from \"react\";\nimport List from \"./List\";\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      list: [],\n      pageTitle: \"Todo\",\n      watch: false,\n      inputValue: \"\",\n      checked: false,\n      listSelected: [],\n    };\n  }\n\n  changeValueHandler = () => {\n    const oldTitle = this.state.pageTitle;\n    const newTitle = oldTitle + \"gbfg\";\n    this.setState({\n      pageTitle: newTitle,\n    });\n  };\n\n  toggleWatchList = (event) => {\n    this.setState({\n      watch: !this.state.watch,\n    });\n  };\n\n  addNewList = (event) => {\n    const { list, inputValue } = this.state;\n    if (inputValue.length !== 0) {\n      this.setState({\n        list: [\n          ...list,\n          { text: inputValue, id: Math.round(Math.random() * 2000) },\n        ],\n        inputValue: \"\",\n      });\n    } else {\n      console.log(\"Enter text\");\n    }\n  };\n\n  inputChange = (event) => {\n    this.setState({\n      inputValue: event.target.value,\n    });\n  };\n\n  handleChange = (event, id) => {\n    const { listSelected } = this.state;\n    if (event.target.checked) {\n      this.setState({\n        listSelected: [...listSelected, id],\n      });\n    } else {\n      this.setState({\n        listSelected: listSelected.filter((item) => item !== id),\n      });\n    }\n    console.log(event.target.checked);\n  };\n\n  deleteSelected = () => {\n    let newArray = this.state.list.filter(\n      (item) =>\n        !this.state.listSelected.some(\n          (selectedItem) => selectedItem === item.id\n        )\n    );\n    this.setState({\n      list: newArray,\n      listSelected: [],\n    });\n  };\n\n  deleteList = (id) => {\n    const { list,listSelected } = this.state;\n    // list.filter(item => console.log(item.id))\n    this.setState({\n      list: list.filter((item) => item.id),\n    });\n    console.log(list);\n  };\n\n  render() {\n    if (this.state.watch) {\n      return (\n        <div className=\"title-container\">\n          <h1>{this.state.pageTitle}</h1>\n          <button\n            className=\"toggle-btn\"\n            onClick={this.toggleWatchList.bind(this)}\n          >\n            Open\n          </button>\n        </div>\n      );\n    }\n\n    return (\n      <div className=\"title-container\">\n        <h1>{this.state.pageTitle}</h1>\n        <button\n          className=\"toggle-btn\"\n          onClick={this.toggleWatchList.bind(this)}\n        >\n          Close\n        </button>\n        <input value={this.state.inputValue} onChange={this.inputChange} />\n        <button onClick={this.addNewList}>Add</button>\n        {this.state.listSelected.length !== 0 ? (\n          <button\n            onClick={this.deleteSelected}\n          >{`Delete Selected (${this.state.listSelected.length})`}</button>\n        ) : null}\n        {this.state.list.map((item) => {\n          return (\n            <List\n              key={item.id.toString()}\n              text={item.text}\n              id={item.id}\n              checked={this.state.listSelected.some(\n                (selectedItem) => selectedItem === item.id\n              )}\n              change={this.handleChange}\n              onClick={this.deleteList}\n              // onChange = {this.changeValueInput}\n              // onClick={this.addNewList}\n            />\n          );\n        })}\n      </div>\n    );\n  }\n}\n\nexport default App;\n","/Users/markeltskhadadze/Desktop/React-Todo/todo/src/reportWebVitals.js",[],"/Users/markeltskhadadze/Desktop/React-Todo/todo/src/List.js",["24"],"import React from \"react\";\nimport \"./App.css\";\n\nclass List extends React.Component {\n    constructor(props){\n        super(props)\n    }\n\n    render () {\n        return (\n            <div className=\"list\">\n              <div className=\"elemList\">\n                <input\n                  type=\"checkbox\"\n                  checked={this.props.checked}\n                  onChange={(event) => this.props.change(event, this.props.id)}\n                />\n                <p>{this.props.text}</p>\n                <button onClick={this.props.onClick}>Delete</button>\n              </div>\n            </div>\n          );\n    }\n}\n\nexport default List;\n",{"ruleId":"25","replacedBy":"26"},{"ruleId":"27","replacedBy":"28"},{"ruleId":"29","severity":1,"message":"30","line":81,"column":18,"nodeType":"31","messageId":"32","endLine":81,"endColumn":30},{"ruleId":"33","severity":1,"message":"34","line":5,"column":5,"nodeType":"35","messageId":"36","endLine":7,"endColumn":6},"no-native-reassign",["37"],"no-negated-in-lhs",["38"],"no-unused-vars","'listSelected' is assigned a value but never used.","Identifier","unusedVar","no-useless-constructor","Useless constructor.","MethodDefinition","noUselessConstructor","no-global-assign","no-unsafe-negation"]